package Singleton;
/* 一、常见设计模式
 *
 *   1、创建型模式（5）：工厂方法、抽象工厂、单例、原型建造者
 *   2、结构型模式（7）：适配器、装饰器、代理、外观、桥接、组合、享元
 *   3、行为型模式（11）：策略、模拟方法、观察者、迭代子、责任链、命令、备忘录、状态、访问者、中介者、解释器
 *
 *
 * 二、单例设计模式：饿汉式，懒汉式
 *   1、所谓单例设计模式：就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例
 *   2、如何实现?
 *       ① 私有化类的构造器(避免在类的外面调用构造器)
 *       ② 内部创建类的对象
 *       ③ 提供公共的方法，返回类的对象
 *   3、优点：
 *       ① 由于单例模式只生成一个实例， 减少了系统性能开销
 *       ② 当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可
 *          以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决
 *
 * 三、饿汉式 vs 懒汉式
 *  饿汉式：
 *     ① 坏处： 一开始就创建对象,对象加载时间过长(声明周期过长)
 *     ② 好处： 饿汉式的线程时安全的(多线程,高并发时)
 *  懒汉式(好一点)：
 *     ① 好处：延迟对象的创建,节省内存空间
 *     ② 坏处(目前的写法)：  线程不安全(可能在判断的时候,另一个线程new了一个新的对象)
 *        ----》到多线程内容时, 再修改
 *
 * 四、单例模式的应用场景
 *     网站的计数器，一般也是单例模式实现，否则难以同步。
 *     应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志
 *      文件一直处于打开状态，因为只能有一个实例去操作， 否则内容不好追加。
 *     数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库
 *       资源。
 *     项目中， 读取配置文件的类，一般也只有一个对象。没有必要每次使用配置
 *       文件数据，都生成一个对象去读取。
 *     Application 也是单例的典型应用
 *     Windows的Task Manager (任务管理器)就是很典型的单例模式
 *     Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程
 *       中，回收站一直维护着仅有的一个实例。
 */

public class Design_Mod {

}
